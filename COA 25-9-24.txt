Write an assemble language program that involves three different procedures, each performing a specific task on hex inputs and hex outputs. 
After obtaining the output from the first procedure, write a second procedure that converts the output in binary and prints it in reverse pattern.
The third procedure accepts a Capital letter as input and converts it into Lower letter. [Use logic Operations]
--------------------------------------------------------------------------------------------------------------------------------------------------

.MODEL SMALL
.STACK 100H

.DATA
    msg1 DB 'Enter Hexa Input : $'
    msg2 DB 'Binary Output (Reversed): $'
    msg3 DB 'Enter a Capital Letter: $'
    msg4 DB 'Lowercase Output : $'
    newline DB 13, 10, '$'  ; Carriage return + Line feed
    hex_input DW 0          ; Storage for hex input
    letter DB ?             ; Storage for the letter input

.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX
    
    CALL HexInputOutput     ; Call first procedure to handle Hex input/output
    CALL ConvertToBinary    ; Call second procedure to convert to binary and reverse the output
    CALL CapitalToLower     ; Call third procedure to convert capital to lowercase letter
    
    MOV AH, 4CH
    INT 21H
MAIN ENDP

;----------------------------------------
; Procedure 1: Hex Input and Output
;----------------------------------------
HexInputOutput PROC
    ; Display prompt for hex input
    LEA DX, msg1
    MOV AH, 09H
    INT 21H
    
    ; Read 4-digit hex input (each digit is 4 bits, total 16 bits)
    XOR BX, BX         ; Clear BX
    MOV CX, 4          ; 4 hex digits to input
    
    HexInputLoop:
        MOV AH, 01H     ; Read a character
        INT 21H
        CMP AL, 0DH     ; If 'Enter', stop
        JE HexInputDone
        CMP AL, 'A'
        JB ConvertNumber ; Check if it's a digit
        CMP AL, 'F'
        JA ConvertNumber ; Check if it's a valid hex character
        
        ; Convert ASCII letter A-F to 10-15
        SUB AL, 37H
        JMP StoreHexDigit

    ConvertNumber:
        SUB AL, 30H      ; Convert ASCII '0'-'9' to 0-9
        
    StoreHexDigit:
        SHL BX, 4        ; Make room for next 4 bits
        OR BL, AL        ; Store the hex digit in BX
        LOOP HexInputLoop
    
    HexInputDone:
    ; Store the input in hex_input for later use
    MOV hex_input, BX
    
    ; Print newline after input
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    RET
HexInputOutput ENDP

;----------------------------------------
; Procedure 2: Convert to Binary and Print Reversed
;----------------------------------------
ConvertToBinary PROC
    ; Display binary output message
    LEA DX, msg2
    MOV AH, 09H
    INT 21H
    
    ; Load the hex input for conversion
    MOV BX, hex_input
    MOV CX, 16         ; 16 bits to process
    
BinaryOutputLoop:
    SHL BX, 1          ; Shift left, MSB goes to Carry Flag
    JC PrintOne
    ; Print '0'
    MOV DL, '0'
    JMP PrintChar
    
PrintOne:
    ; Print '1'
    MOV DL, '1'

PrintChar:
    MOV AH, 02H        ; Display character
    INT 21H
    LOOP BinaryOutputLoop ; Repeat until all bits are processed
    
    ; Print newline after output
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    RET
ConvertToBinary ENDP

;----------------------------------------
; Procedure 3: Capital to Lowercase Conversion
;----------------------------------------
CapitalToLower PROC
    ; Display prompt for letter input
    LEA DX, msg3
    MOV AH, 09H
    INT 21H
    
    ; Read a capital letter
    MOV AH, 01H
    INT 21H
    MOV letter, AL      ; Store the letter
    
    ; Print newline after input
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    ; Check if the letter is capital A-Z
    CMP AL, 'A'
    JL InvalidInput
    CMP AL, 'Z'
    JG InvalidInput
    
    ; Convert to lowercase
    OR AL, 20H
    MOV letter, AL
    
    ; Display the lowercase result
    LEA DX, msg4
    MOV AH, 09H
    INT 21H
    
    MOV DL, letter
    MOV AH, 02H
    INT 21H
    
    ; Print newline after output
    LEA DX, newline
    MOV AH, 09H
    INT 21H
    
    RET
    
InvalidInput:
    ; Handle invalid input (Optional)
    RET
CapitalToLower ENDP

END MAIN
